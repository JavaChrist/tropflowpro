import { ExpenseNote, Trip } from '../types';
import { ReceiptAttachment, fetchAllReceipts } from './generatePDF';
import { sendEmailViaAPI, EMAIL_CONFIG, isEmailConfigured } from '../config/resend';

// Types pour les emails
export interface EmailData {
  to: string;
  subject: string;
  body: string;
  attachments?: ReceiptAttachment[];
}

export interface EmailTemplate {
  subject: string;
  body: string;
}

// Interface pour les donn√©es d'email de d√©placement
export interface TripEmailData {
  trip: Trip;
  expenseNotes: ExpenseNote[];
  totalAmount: number;
  totalVeloce: number;
  totalPersonal: number;
}

// Fonction pour valider un email
export const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Fonction pour formater un email de d√©pense
export const formatExpenseEmail = (expenseData: {
  title: string;
  amount: number;
  date: string;
  category: string;
}): EmailTemplate => {
  const subject = `Nouvelle d√©pense : ${expenseData.title}`;
  const body = `
    Bonjour,
    
    Une nouvelle d√©pense a √©t√© enregistr√©e :
    
    ‚Ä¢ Titre : ${expenseData.title}
    ‚Ä¢ Montant : ${expenseData.amount}‚Ç¨
    ‚Ä¢ Date : ${expenseData.date}
    ‚Ä¢ Cat√©gorie : ${expenseData.category}
    
    Cordialement,
    Votre gestionnaire de d√©penses
  `;

  return { subject, body };
};

// Fonction pour formater un email de rapport mensuel
export const formatMonthlyReportEmail = (reportData: {
  month: string;
  totalExpenses: number;
  expenseCount: number;
  topCategory: string;
}): EmailTemplate => {
  const subject = `Rapport mensuel des d√©penses - ${reportData.month}`;
  const body = `
    Bonjour,
    
    Voici votre rapport mensuel des d√©penses pour ${reportData.month} :
    
    ‚Ä¢ Total des d√©penses : ${reportData.totalExpenses}‚Ç¨
    ‚Ä¢ Nombre de d√©penses : ${reportData.expenseCount}
    ‚Ä¢ Cat√©gorie principale : ${reportData.topCategory}
    
    Consultez votre application pour plus de d√©tails.
    
    Cordialement,
    Votre gestionnaire de d√©penses
  `;

  return { subject, body };
};

// Fonction pour formater un email de rapport de d√©placement
export const formatTripReportEmail = (tripData: TripEmailData): EmailTemplate => {
  const subject = `Rapport de frais - ${tripData.trip.name} (${tripData.trip.destination})`;

  const body = `
    Bonjour,
    
    Veuillez trouver ci-joint le rapport de frais pour le d√©placement suivant :
    
    üìç **INFORMATIONS DU D√âPLACEMENT**
    ‚Ä¢ Destination : ${tripData.trip.destination}
    ‚Ä¢ Objet : ${tripData.trip.purpose}
    ‚Ä¢ Dates : du ${new Date(tripData.trip.departureDate).toLocaleDateString('fr-FR')} au ${new Date(tripData.trip.returnDate).toLocaleDateString('fr-FR')}
    ‚Ä¢ Collaborateur : ${tripData.trip.collaborator.firstName} ${tripData.trip.collaborator.lastName}
    
    üí∞ **R√âSUM√â FINANCIER**
    ‚Ä¢ Nombre de notes de frais : ${tripData.expenseNotes.length}
    ‚Ä¢ Montant total : ${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(tripData.totalAmount)}
    ‚Ä¢ Montant V√©loce : ${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(tripData.totalVeloce)}
    ‚Ä¢ Montant personnel : ${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(tripData.totalPersonal)}
    
    üìã **D√âTAIL DES NOTES DE FRAIS**
    ${tripData.expenseNotes.map((note, index) => `
    ${index + 1}. ${note.description}
       ‚Ä¢ Cat√©gorie : ${note.category}
       ‚Ä¢ Montant : ${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(note.amount)}
       ‚Ä¢ Date : ${new Date(note.date).toLocaleDateString('fr-FR')}
       ‚Ä¢ Facture : ${note.receiptUrl ? '‚úì Disponible' : '‚úó Manquante'}${note.receiptUrl ? `
       ‚Ä¢ Lien : ${note.receiptUrl}` : ''}
    `).join('')}
    
    ${tripData.expenseNotes.filter(note => note.receiptUrl).length > 0 ?
      `üîó **FACTURES DISPONIBLES** : ${tripData.expenseNotes.filter(note => note.receiptUrl).length} fichier(s) accessible(s) via les liens ci-dessus` :
      '‚ö†Ô∏è **ATTENTION** : Aucune facture jointe √† ce rapport'
    }
    
    Cordialement,
    TripFlow - Gestionnaire de Notes de Frais
  `;

  return { subject, body };
};

// Fonction pour formater un email de note de frais individuelle
export const formatExpenseNoteEmail = (expenseNote: ExpenseNote, trip: Trip): EmailTemplate => {
  const subject = `Note de frais - ${expenseNote.description} (${trip.destination})`;

  const body = `
    Bonjour,
    
    Une nouvelle note de frais a √©t√© enregistr√©e pour le d√©placement "${trip.name}" :
    
    üìç **D√âPLACEMENT**
    ‚Ä¢ Destination : ${trip.destination}
    ‚Ä¢ Objet : ${trip.purpose}
    
    üí∞ **D√âTAIL DE LA NOTE**
    ‚Ä¢ Description : ${expenseNote.description}
    ‚Ä¢ Cat√©gorie : ${expenseNote.category}
    ‚Ä¢ Sous-cat√©gorie : ${expenseNote.subcategory}
    ‚Ä¢ Montant : ${new Intl.NumberFormat('fr-FR', { style: 'currency', currency: 'EUR' }).format(expenseNote.amount)}
    ‚Ä¢ Date : ${new Date(expenseNote.date).toLocaleDateString('fr-FR')}
    ‚Ä¢ V√©loce : ${expenseNote.isVeloce ? 'Oui' : 'Non'}
    ‚Ä¢ Personnel : ${expenseNote.isPersonal ? 'Oui' : 'Non'}
    
    üìÑ **FACTURE** : ${expenseNote.receiptUrl ? '‚úì Jointe en pi√®ce jointe' : '‚úó Aucune facture'}
    
    Cordialement,
    TripFlow - Gestionnaire de Notes de Frais
  `;

  return { subject, body };
};

// Fonction pour cr√©er un email avec un re√ßu en pi√®ce jointe
export const createReceiptEmail = (
  recipientEmail: string,
  expenseData: {
    title: string;
    amount: number;
    date: string;
    category: string;
  },
  receiptAttachment?: ReceiptAttachment
): EmailData => {
  const template = formatExpenseEmail(expenseData);

  return {
    to: recipientEmail,
    subject: template.subject,
    body: template.body,
    attachments: receiptAttachment ? [receiptAttachment] : undefined
  };
};

// Fonction pour cr√©er un email de rapport de d√©placement avec factures
export const createTripReportEmail = async (
  recipientEmail: string,
  tripData: TripEmailData
): Promise<EmailData> => {
  const template = formatTripReportEmail(tripData);

  // SOLUTION CORS: Ne pas t√©l√©charger les factures, juste envoyer les liens
  // Les factures sont accessibles via leurs URLs Firebase publiques
  console.log('üìß Email sans pi√®ces jointes (probl√®me CORS contourn√©)');
  console.log('üîó Les factures seront accessibles via leurs liens dans l\'email');

  return {
    to: recipientEmail,
    subject: template.subject,
    body: template.body,
    attachments: [] // Pas de pi√®ces jointes √† cause des probl√®mes CORS
  };
};

// Fonction pour cr√©er un email de note de frais individuelle avec facture
export const createExpenseNoteEmail = async (
  recipientEmail: string,
  expenseNote: ExpenseNote,
  trip: Trip
): Promise<EmailData> => {
  const template = formatExpenseNoteEmail(expenseNote, trip);

  // R√©cup√©rer la facture si elle existe
  const receipts = expenseNote.receiptUrl ? await fetchAllReceipts([expenseNote]) : [];

  return {
    to: recipientEmail,
    subject: template.subject,
    body: template.body,
    attachments: receipts
  };
};

// Fonction pour envoyer un email (intelligent: API Vercel ou simulation)
export const sendEmail = async (emailData: EmailData): Promise<boolean> => {
  try {
    console.log('üìß Envoi d\'email en cours...', {
      to: emailData.to,
      subject: emailData.subject,
      attachments: emailData.attachments?.length || 0
    });

    // D√©tecter l'environnement de production
    const hostname = window.location.hostname;
    const isProduction = hostname.includes('vercel.app') ||
      hostname.includes('tropflow') ||
      (hostname !== 'localhost' && hostname !== '127.0.0.1' && !hostname.startsWith('192.168.'));

    if (isProduction) {
      console.log('üåê Environnement de production d√©tect√© - Utilisation de l\'API Vercel');
      // En production, on utilisera l'API Vercel (impl√©ment√© dans sendTripReport)
      return false; // Cette fonction n'est pas utilis√©e directement en production
    } else {
      console.log('üîß Environnement de d√©veloppement d√©tect√© - Mode simulation');

      // Mode simulation pour le d√©veloppement local
      console.warn('üîÑ Mode simulation activ√© pour le d√©veloppement local');
      console.log('‚úâÔ∏è Email qui serait envoy√©:');
      console.log(`  üì§ De: ${EMAIL_CONFIG.FROM_NAME} <${EMAIL_CONFIG.FROM_EMAIL}>`);
      console.log(`  üì• √Ä: ${emailData.to}`);
      console.log(`  üìã Sujet: ${emailData.subject}`);
      console.log(`  üìé Pi√®ces jointes: ${emailData.attachments?.length || 0}`);
      console.log('üìß Corps de l\'email:');
      console.log(emailData.body);

      // Simulation d'envoi
      await new Promise(resolve => setTimeout(resolve, 2000));
      console.log('‚úÖ Email simul√© envoy√© avec succ√®s (mode d√©veloppement)');
      return true;
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'envoi de l\'email:', error);
    return false;
  }
};

// Fonction pour envoyer un rapport complet de d√©placement
export const sendTripReport = async (
  recipientEmail: string,
  tripData: TripEmailData
): Promise<boolean> => {
  try {
    // D√©tecter l'environnement de production (Vercel ou autre domaine de production)
    const hostname = window.location.hostname;
    const isProduction = hostname.includes('vercel.app') ||
      hostname.includes('tropflow') ||
      (hostname !== 'localhost' && hostname !== '127.0.0.1' && !hostname.startsWith('192.168.'));

    if (isProduction) {
      console.log('üåê Envoi via API Vercel (production)');

      // Pr√©parer les donn√©es pour l'API Vercel
      const apiData = {
        tripData,
        expenseNotes: tripData.expenseNotes,
        recipientEmail
      };

      // Appeler l'API Vercel
      const response = await fetch('/api/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiData)
      });

      const result = await response.json();

      if (!response.ok) {
        console.error('‚ùå Erreur API Vercel:', result);
        return false;
      }

      console.log('‚úÖ Email envoy√© via API Vercel. ID:', result.emailId);
      console.log(`üìé ${result.receiptsCount} factures jointes`);
      return true;

    } else {
      console.log('üîß Mode d√©veloppement - Simulation d√©taill√©e');

      // Mode simulation d√©taill√© pour le d√©veloppement
      const emailData = await createTripReportEmail(recipientEmail, tripData);
      return await sendEmail(emailData);
    }
  } catch (error) {
    console.error('Erreur lors de l\'envoi du rapport de d√©placement:', error);
    return false;
  }
};

// Fonction pour envoyer une notification de note de frais
export const sendExpenseNoteNotification = async (
  recipientEmail: string,
  expenseNote: ExpenseNote,
  trip: Trip
): Promise<boolean> => {
  try {
    const emailData = await createExpenseNoteEmail(recipientEmail, expenseNote, trip);
    return await sendEmail(emailData);
  } catch (error) {
    console.error('Erreur lors de l\'envoi de la notification:', error);
    return false;
  }
};

// Fonction de test pour v√©rifier la configuration Email
export const testEmailConnection = async (): Promise<boolean> => {
  try {
    console.log('üß™ Test de connexion Email...');

    if (!isEmailConfigured()) {
      console.error('‚ùå Configuration email manquante');
      return false;
    }

    console.log('‚úÖ Configuration email valide');
    console.log('üìß Email configur√©:', EMAIL_CONFIG.FROM_EMAIL);
    console.log('üîí Les cl√©s API sont s√©curis√©es c√¥t√© serveur');

    // D√©tecter l'environnement de production
    const hostname = window.location.hostname;
    const isProduction = hostname.includes('vercel.app') ||
      hostname.includes('tropflow') ||
      (hostname !== 'localhost' && hostname !== '127.0.0.1' && !hostname.startsWith('192.168.'));

    if (!isProduction) {
      console.log('üîß Mode d√©veloppement - Test simul√©');
      console.log('‚úÖ Configuration valid√©e : Pr√™t pour l\'envoi via API serverless');
      return true;
    }

    // En production, on pourrait faire un test r√©el via l'API
    console.log('üåê Production - Configuration pr√™te');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur test Email:', error);
    return false;
  }
};

const emailUtils = {
  validateEmail,
  formatExpenseEmail,
  formatMonthlyReportEmail,
  formatTripReportEmail,
  formatExpenseNoteEmail,
  sendEmail,
  createReceiptEmail,
  createTripReportEmail,
  createExpenseNoteEmail,
  sendTripReport,
  sendExpenseNoteNotification,
  testEmailConnection
};

export default emailUtils;
