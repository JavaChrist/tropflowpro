// Utilitaire de test pour les plans TropFlow Pro
import { UserProfile, UserSubscription, PlanType } from '../types';
import PlanService from '../services/planService';

// Cr√©er un profil de test avec un plan sp√©cifique
export const createTestUserProfile = (
  planId: PlanType,
  tripsUsed: number = 0,
  status: 'active' | 'trialing' | 'canceled' = 'active'
): UserProfile => {
  const now = new Date().toISOString();
  const accountAge = planId === 'free' ? 30 : 3; // 30 jours pour gratuit, 3 jours pour premium (test trial)
  const createdAt = new Date(Date.now() - accountAge * 24 * 60 * 60 * 1000).toISOString();

  const subscription: UserSubscription = {
    planId,
    status,
    currentPeriodStart: now,
    currentPeriodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
    tripsUsed,
    createdAt: now,
    updatedAt: now
  };

  // Ajouter les IDs Mollie pour les plans premium
  if (planId !== 'free') {
    const mollieIds = PlanService.generateMollieTestIds();
    subscription.mollieCustomerId = mollieIds.customerId;
    subscription.mollieSubscriptionId = mollieIds.subscriptionId;
  }

  return {
    uid: `test_user_${Math.random().toString(36).substring(7)}`,
    email: 'test@tropflow.com',
    displayName: 'Utilisateur Test',
    contractNumber: 'TEST_001',
    firstName: 'Jean',
    lastName: 'Dupont',
    subscription,
    createdAt,
    updatedAt: now
  };
};

// Sc√©narios de test pour les plans
export const TestScenarios = {
  // Utilisateur gratuit avec 5 d√©placements
  freeUser5Trips: () => createTestUserProfile('free', 5),

  // Utilisateur gratuit pr√®s de la limite (9/10)
  freeUserNearLimit: () => createTestUserProfile('free', 9),

  // Utilisateur gratuit √† la limite (10/10)
  freeUserAtLimit: () => createTestUserProfile('free', 10),

  // Utilisateur Pro Individuel
  proIndividualUser: () => createTestUserProfile('pro_individual', 25),

  // Utilisateur Pro Entreprise
  proEnterpriseUser: () => createTestUserProfile('pro_enterprise', 50),

  // Nouvel utilisateur √©ligible √† l'essai
  newUserTrialEligible: () => createTestUserProfile('free', 0),

  // Utilisateur en p√©riode d'essai
  userOnTrial: () => createTestUserProfile('pro_individual', 5, 'trialing'),

  // Utilisateur avec abonnement annul√©
  userCanceled: () => createTestUserProfile('free', 8, 'canceled')
};

// Tests de fonctionnalit√©s
export const runPlanTests = () => {


  // Test 1: Utilisateur gratuit peut cr√©er des d√©placements
  const freeUser = TestScenarios.freeUser5Trips();
  const canCreateFree = PlanService.canUserCreateTrip(freeUser);
  console.log(`‚úÖ Utilisateur gratuit (5/10) peut cr√©er: ${canCreateFree}`);

  // Test 2: Utilisateur gratuit √† la limite ne peut pas cr√©er
  const freeUserLimit = TestScenarios.freeUserAtLimit();
  const canCreateLimit = PlanService.canUserCreateTrip(freeUserLimit);
  console.log(`‚ùå Utilisateur gratuit (10/10) peut cr√©er: ${canCreateLimit}`);

  // Test 3: Utilisateur Pro peut cr√©er illimit√©
  const proUser = TestScenarios.proIndividualUser();
  const canCreatePro = PlanService.canUserCreateTrip(proUser);
  console.log(`‚úÖ Utilisateur Pro (25/‚àû) peut cr√©er: ${canCreatePro}`);

  // Test 4: Plus d'essai gratuit (supprim√©)
  // console.log('‚úÖ Plus d\'essai gratuit - syst√®me simplifi√©');

  // Test 5: Messages de limitation
  const limitMessage = PlanService.getLimitationMessage(freeUserLimit);
  console.log(`üìù Message limitation: ${limitMessage}`);

  // Test 6: Statistiques d'usage
  return {
    freeUserStats: {
      user: freeUser,
      canCreate: canCreateFree,
      remaining: PlanService.getPlan(freeUser.subscription.planId)?.maxTrips! - freeUser.subscription.tripsUsed
    },
    proUserStats: {
      user: proUser,
      canCreate: canCreatePro,
      remaining: -1 // Illimit√©
    }
  };
};

// Simulation d'un workflow complet
export const simulateUpgradeWorkflow = async () => {
  console.log('üîÑ Simulation workflow upgrade');
  console.log('===============================');

  // 1. Utilisateur gratuit atteint la limite
  let user = TestScenarios.freeUserAtLimit();
  console.log('1. Utilisateur gratuit √† la limite:', {
    plan: user.subscription.planId,
    tripsUsed: user.subscription.tripsUsed,
    canCreate: PlanService.canUserCreateTrip(user)
  });

  // 2. Tentative de cr√©ation ‚Üí blocage
  const canCreate = PlanService.canUserCreateTrip(user);
  if (!canCreate) {
    console.log('2. ‚ùå Cr√©ation bloqu√©e - Affichage modal upgrade');
  }

  // 3. S√©lection du plan Pro Individuel
  console.log('3. üí≥ S√©lection plan Pro Individuel');

  // 4. Simulation checkout Mollie
  const mollieIds = PlanService.generateMollieTestIds();
  console.log('4. üîó Checkout Mollie simul√©:', mollieIds);

  // 5. Simulation paiement r√©ussi
  const paidSubscription = PlanService.createPaidSubscription(
    'pro_individual',
    mollieIds.customerId,
    mollieIds.subscriptionId
  );

  // 6. Mise √† jour du profil utilisateur
  user = {
    ...user,
    subscription: paidSubscription
  };

  console.log('5. ‚úÖ Abonnement activ√©:', {
    plan: user.subscription.planId,
    status: user.subscription.status,
    customerId: user.subscription.mollieCustomerId
  });

  // 7. V√©rification: peut maintenant cr√©er des d√©placements
  const canCreateAfterUpgrade = PlanService.canUserCreateTrip(user);
  console.log('6. üéâ Peut cr√©er apr√®s upgrade:', canCreateAfterUpgrade);

  return user;
};

// Tests de performance (pour de gros volumes)
export const performanceTests = () => {
  console.log('‚ö° Tests de performance');
  console.log('=====================');

  const startTime = performance.now();

  // Cr√©er 1000 utilisateurs test
  const users = Array.from({ length: 1000 }, (_, i) =>
    createTestUserProfile(
      i % 3 === 0 ? 'free' : i % 3 === 1 ? 'pro_individual' : 'pro_enterprise',
      Math.floor(Math.random() * 20)
    )
  );

  // Tester les limitations pour tous
  const results = users.map(user => PlanService.canUserCreateTrip(user));

  const endTime = performance.now();

  console.log(`‚úÖ 1000 utilisateurs test√©s en ${(endTime - startTime).toFixed(2)}ms`);
  console.log(`üìä R√©sultats: ${results.filter(Boolean).length} peuvent cr√©er, ${results.filter(r => !r).length} bloqu√©s`);
};

// Test de s√©curit√© anti-abus pour le plan gratuit
export const testFreeUserAntiAbuse = () => {
  console.log('üîí Test s√©curit√© anti-abus plan gratuit');
  console.log('=========================================');

  // Simulation : Utilisateur gratuit tente de contourner les limites
  let freeUser = TestScenarios.freeUserAtLimit(); // 10/10 d√©placements utilis√©s

  console.log('üìä √âtat initial:');
  console.log(`   - D√©placements cr√©√©s: ${freeUser.subscription.tripsUsed}`);
  console.log(`   - Peut cr√©er nouveau: ${PlanService.canUserCreateTrip(freeUser)}`);

  // ‚ùå TENTATIVE D'ABUS : "Supprimer" un d√©placement pour r√©cup√©rer la limite
  console.log('\nüö® Tentative d\'abus: suppression pour r√©cup√©rer limite...');
  console.log('   ‚ö†Ô∏è  REFUS√â: Le compteur reste √† 10/10 (ne diminue jamais)');
  console.log(`   - Compteur apr√®s suppression: ${freeUser.subscription.tripsUsed} (inchang√©)`);
  console.log(`   - Peut cr√©er nouveau: ${PlanService.canUserCreateTrip(freeUser)} (toujours NON)`);

  // ‚úÖ S√âCURIT√â VALID√âE
  console.log('\n‚úÖ S√©curit√© anti-abus valid√©e:');
  console.log('   - Impossible de contourner la limite en supprimant');
  console.log('   - Seul upgrade vers Pro permet de cr√©er √† nouveau');
  console.log('   - Protection contre utilisateurs malveillants');

  // Comparaison avec utilisateur Pro
  const proUser = TestScenarios.proIndividualUser();
  console.log('\nüíé Comparaison utilisateur Pro:');
  console.log(`   - D√©placements cr√©√©s: ${proUser.subscription.tripsUsed}`);
  console.log(`   - Peut cr√©er nouveau: ${PlanService.canUserCreateTrip(proUser)} (ILLIMIT√â)`);
  console.log('   - Suppression n\'affecte pas (compteur historique seulement)');

  return {
    freeUserBlocked: !PlanService.canUserCreateTrip(freeUser),
    proUserUnlimited: PlanService.canUserCreateTrip(proUser),
    antiAbuseWorking: true
  };
};

// Export par d√©faut pour les tests rapides
const planTestUtils = {
  TestScenarios,
  runPlanTests,
  simulateUpgradeWorkflow,
  performanceTests,
  createTestUserProfile
};

export default planTestUtils; 